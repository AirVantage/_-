#!/bin/sh
#
# $ ./underscore_to_lodash directory_with_js_to_refactor
#
# All JS is refactored: you must remove `node_modules` beforehand.
#
DIRECTORY=`readlink -f $1`
if [ ! -d $DIRECTORY ] || [ -z $DIRECTORY ]; then
  echo "Single directory is mandatory"
  exit 1
fi

echo 'Working with:' $DIRECTORY
echo 'underscore(require("underscore")) -> lodash(require("lodash"))'
(
  grasp --equery 'require("underscore")' --replace 'require("lodash")' \
    --in-place --only-matching --recursive $DIRECTORY ||
  echo "$(tput setaf 3)Bad stuff with underscore(require(\"underscore\")) -> lodash(require(\"lodash\"))$(tput setaf 0)"
) &&
cd $DIRECTORY > /dev/null &&
git commit -a -m 'underscore(require("underscore")) -> lodash(require("lodash"))' > /dev/null &&
cd - > /dev/null

echo 'underscore(_.contains) -> lodash(_.includes)'
(
  grasp --equery '_.contains($array, $value)' --replace '_.includes({{array}}, {{value}})' \
    --in-place --only-matching --recursive $DIRECTORY ||
  echo "$(tput setaf 3)Bad stuff with underscore(_.contains) -> lodash(_.includes)$(tput setaf 0)"
) &&
cd $DIRECTORY > /dev/null &&
git commit -a -m 'underscore(_.contains) -> lodash(_.includes)' > /dev/null &&
cd - > /dev/null

echo 'underscore(_.extend) -> lodash(_.assignIn)'
(
  grasp --equery '_.extend(_$objects)' --replace '_.assignIn({{objects | join ", "}})' \
    --in-place --only-matching --recursive $DIRECTORY ||
  echo "$(tput setaf 3)Bad stuff with underscore(_.extend) -> lodash(_.assignIn)$(tput setaf 0)"
) &&
cd $DIRECTORY > /dev/null &&
git commit -a -m 'underscore(_.extend) -> lodash(_.assignIn)' > /dev/null &&
cd - > /dev/null

echo 'underscore(_.pluck) -> lodash(_.map)'
(
  grasp --equery '_.pluck($object, $field)' --replace '_.map({{object}}, {{field}})' \
    --in-place --only-matching --recursive $DIRECTORY ||
  echo "$(tput setaf 3)Bad stuff with underscore(_.pluck) -> lodash(_.map)$(tput setaf 0)"
) &&
cd $DIRECTORY > /dev/null &&
git commit -a -m 'underscore(_.pluck) -> lodash(_.map)' > /dev/null &&
cd - > /dev/null

echo 'underscore(_.each) -> lodash(_.forEach)'
(
  grasp --equery '_.each($array, $function)' --replace '_.forEach({{array}}, {{function}})' \
    --in-place --only-matching --recursive $DIRECTORY ||
  echo "$(tput setaf 3)Bad stuff with underscore(_.each) -> lodash(_.forEach)$(tput setaf 0)"
) &&
cd $DIRECTORY > /dev/null &&
git commit -a -m 'underscore(_.each) -> lodash(_.forEach)' > /dev/null &&
cd - > /dev/null

echo 'underscore(_.first) -> lodash(_.head)'
(
  grasp --equery '_.first($array)' --replace '_.head({{array}})' \
    --in-place --only-matching --recursive $DIRECTORY ||
  echo "$(tput setaf 3)Bad stuff with underscore(_.first) -> lodash(_.head)$(tput setaf 0)"
) &&
cd $DIRECTORY > /dev/null &&
git commit -a -m 'underscore(_.first) -> lodash(_.head)' > /dev/null &&
cd - > /dev/null

echo 'underscore(_.any) -> lodash(_.some)'
(
  grasp --equery '_.any($array)' --replace '_.some({{array}})' \
    --in-place --only-matching --recursive $DIRECTORY ||
  echo "$(tput setaf 3)Bad stuff with underscore(_.any) -> lodash(_.some)$(tput setaf 0)"
) &&
cd $DIRECTORY > /dev/null &&
git commit -a -m 'underscore(_.any) -> lodash(_.some)' > /dev/null &&
cd - > /dev/null

echo 'underscore(_.rest) -> lodash(_.tail)'
(
  grasp --equery '_.rest($array)' --replace '_.tail({{array}})' \
    --in-place --only-matching --recursive $DIRECTORY ||
  echo "$(tput setaf 3)Bad stuff with underscore(_.rest) -> lodash(_.tail)$(tput setaf 0)"
) &&
cd $DIRECTORY > /dev/null &&
git commit -a -m 'underscore(_.rest) -> lodash(_.tail)' > /dev/null &&
cd - > /dev/null

echo 'lodash(_.include) -> lodash(_.includes)'
(
  grasp --equery '_.include($array, $value)' --replace '_.includes({{array}}, {{value}})' \
    --in-place --only-matching --recursive $DIRECTORY ||
  echo "$(tput setaf 3)Bad stuff with lodash(_.include) -> lodash(_.includes)$(tput setaf 0)"
) &&
cd $DIRECTORY > /dev/null &&
git commit -a -m 'lodash(_.include) -> lodash(_.includes)' > /dev/null &&
cd - > /dev/null

echo 'lodash(_.pairs) -> lodash(_.toPairs)'
(
  grasp --equery '_.pairs($object)' --replace '_.toPairs({{object}})' \
    --in-place --only-matching --recursive $DIRECTORY ||
  echo "$(tput setaf 3)Bad stuff with lodash(_.pairs) -> lodash(_.toPairs)$(tput setaf 0)"
) &&
cd $DIRECTORY > /dev/null &&
git commit -a -m 'lodash(_.pairs) -> lodash(_.toPairs)' > /dev/null &&
cd - > /dev/null

echo 'lodash(_.padLeft) -> lodash(_.padStart)'
(
  grasp --equery '_.padLeft($string, $length)' --replace '_.padStart({{string}}, {{length}})' \
    --in-place --only-matching --recursive $DIRECTORY ||
  echo "$(tput setaf 3)Bad stuff with lodash(_.padLeft) -> lodash(_.padStart)$(tput setaf 0)"
) &&
cd $DIRECTORY > /dev/null &&
git commit -a -m 'lodash(_.padLeft) -> lodash(_.padStart)' > /dev/null &&
cd - > /dev/null

echo 'lodash(_.padLeft) -> lodash(_.padStart)'
(
  grasp --equery '_.padLeft($string, $length, $chars)' --replace '_.padStart({{string}}, {{length}}, {{chars}})' \
    --in-place --only-matching --recursive $DIRECTORY ||
  echo "$(tput setaf 3)Bad stuff with lodash(_.padLeft) -> lodash(_.padStart)$(tput setaf 0)"
) &&
cd $DIRECTORY > /dev/null &&
git commit -a -m 'lodash(_.padLeft) -> lodash(_.padStart)' > /dev/null &&
cd - > /dev/null

echo 'lodash(_.findWhere) -> lodash(_.find)'
(
  grasp --equery '_.findWhere($collection, $source)' --replace '_.find({{collection}}, {{source}})' \
    --in-place --only-matching --recursive $DIRECTORY ||
  echo "$(tput setaf 3)Bad stuff with lodash(_.findWhere) -> lodash(_.find)$(tput setaf 0)"
) &&
cd $DIRECTORY > /dev/null &&
git commit -a -m 'lodash(_.findWhere) -> lodash(_.find)' > /dev/null &&
cd - > /dev/null

echo "$(tput setaf 1)"
echo "#                                   #"
echo "# Here are calls to handle MANUALLY #"
echo "#                                   #"
echo "$(tput setaf 0)"
grasp --only-matching --recursive --equery '_.chain(__)' $DIRECTORY
grasp --only-matching --recursive --equery '_(__)' $DIRECTORY

#
# Check if `grasp` missed some calls
#
for fn in \
  "_\.any" \
  "_\.contains" \
  "_\.each" \
  "_\.extend" \
  "_\.find" \
  "_\.findWhere" \
  "_\.first" \
  "_\.include(" \
  "_\.padLeft" \
  "_\.pairs" \
  "_\.pluck" \
  "_\.rest"
do
  if grep --quiet --max-count=1 --recursive --exclude-dir=.git -e $fn $DIRECTORY
  then
    grep -rnH --color --exclude-dir=.git -e $fn $DIRECTORY
  fi
done
