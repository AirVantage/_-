#!/bin/sh
#
# $ ./underscore_to_lodash directory_with_js_to_refactor
#
# All JS is refactored: you must remove `node_modules` beforehand.
#

#
# Transparent transformations
#
# underscore(_.bind) -> lodash(_.bind)
# underscore(_.clone) -> lodash(_.clone)
# underscore(_.compact) -> lodash(_.compact)
# underscore(_.difference) -> lodash(_.difference)
# underscore(_.intersection) -> lodash(_.intersection)
# underscore(_.isArray) -> lodash(_.isArray)
# underscore(_.isBoolean) -> lodash(_.isBoolean)
# underscore(_.isElement) -> lodash(_.isElement)
# underscore(_.isNaN) -> lodash(_.isNaN)
# underscore(_.isNumber) -> lodash(_.isNumber)
# underscore(_.isObject) -> lodash(_.isObject)
# underscore(_.negate) -> lodash(_.negate)
# underscore(_.partial) -> lodash(_.partial)
# underscore(_.size) -> lodash(_.size)
# underscore(_.union) -> lodash(_.union)
# underscore(_.uniqueId) -> lodash(_.uniqueId)
# underscore(_.values) -> lodash(_.values)
# underscore(_.without) -> lodash(_.without)
#
# underscore(_.defaults) -> lodash(_.defaults) No work to do
# underscore(_.min) -> lodash(_.min) No work to do
# underscore(_.max) -> lodash(_.max) No work to do
# underscore(_.every) -> lodash(_.every) Functions signature differ, problems start with third parameter

DIRECTORY=`readlink -f $1`
if [ ! -d $DIRECTORY ] || [ -z $DIRECTORY ]; then
  echo "Single directory is mandatory"
  exit 1
fi

for rule in $( find rules -type f | sort )
do
  if $rule $DIRECTORY
  then
    echo "o: $rule"
  else
    echo "x: $rule"
  fi
done

exit 0

echo 'underscore(_.each) -> lodash(_.forEach)'
(
  grasp --equery '_.each($array, $function)' --replace '_.forEach({{array}}, {{function}})' \
    --in-place --only-matching --recursive $DIRECTORY ||
  echo "$(tput setaf 3)Bad stuff with underscore(_.each) -> lodash(_.forEach)$(tput setaf 0)"
) &&
cd $DIRECTORY > /dev/null &&
git commit -a -m 'underscore(_.each) -> lodash(_.forEach)' > /dev/null &&
cd - > /dev/null

echo 'underscore(_.first) -> lodash(_.head)'
(
  grasp --equery '_.first($array)' --replace '_.head({{array}})' \
    --in-place --only-matching --recursive $DIRECTORY ||
  echo "$(tput setaf 3)Bad stuff with underscore(_.first) -> lodash(_.head)$(tput setaf 0)"
) &&
cd $DIRECTORY > /dev/null &&
git commit -a -m 'underscore(_.first) -> lodash(_.head)' > /dev/null &&
cd - > /dev/null

echo 'underscore(_.any) -> lodash(_.some)'
(
  grasp --equery '_.any($array)' --replace '_.some({{array}})' \
    --in-place --only-matching --recursive $DIRECTORY ||
  echo "$(tput setaf 3)Bad stuff with underscore(_.any) -> lodash(_.some)$(tput setaf 0)"
) &&
cd $DIRECTORY > /dev/null &&
git commit -a -m 'underscore(_.any) -> lodash(_.some)' > /dev/null &&
cd - > /dev/null

echo 'underscore(_.rest) -> lodash(_.tail)'
(
  grasp --equery '_.rest($array)' --replace '_.tail({{array}})' \
    --in-place --only-matching --recursive $DIRECTORY ||
  echo "$(tput setaf 3)Bad stuff with underscore(_.rest) -> lodash(_.tail)$(tput setaf 0)"
) &&
cd $DIRECTORY > /dev/null &&
git commit -a -m 'underscore(_.rest) -> lodash(_.tail)' > /dev/null &&
cd - > /dev/null

echo 'lodash(_.include) -> lodash(_.includes)'
(
  grasp --equery '_.include($array, $value)' --replace '_.includes({{array}}, {{value}})' \
    --in-place --only-matching --recursive $DIRECTORY ||
  echo "$(tput setaf 3)Bad stuff with lodash(_.include) -> lodash(_.includes)$(tput setaf 0)"
) &&
cd $DIRECTORY > /dev/null &&
git commit -a -m 'lodash(_.include) -> lodash(_.includes)' > /dev/null &&
cd - > /dev/null

echo 'lodash(_.pairs) -> lodash(_.toPairs)'
(
  grasp --equery '_.pairs($object)' --replace '_.toPairs({{object}})' \
    --in-place --only-matching --recursive $DIRECTORY ||
  echo "$(tput setaf 3)Bad stuff with lodash(_.pairs) -> lodash(_.toPairs)$(tput setaf 0)"
) &&
cd $DIRECTORY > /dev/null &&
git commit -a -m 'lodash(_.pairs) -> lodash(_.toPairs)' > /dev/null &&
cd - > /dev/null

echo 'lodash(_.padLeft) -> lodash(_.padStart)'
(
  grasp --equery '_.padLeft($string, $length)' --replace '_.padStart({{string}}, {{length}})' \
    --in-place --only-matching --recursive $DIRECTORY ||
  echo "$(tput setaf 3)Bad stuff with lodash(_.padLeft) -> lodash(_.padStart)$(tput setaf 0)"
) &&
cd $DIRECTORY > /dev/null &&
git commit -a -m 'lodash(_.padLeft) -> lodash(_.padStart)' > /dev/null &&
cd - > /dev/null

echo 'lodash(_.padLeft) -> lodash(_.padStart)'
(
  grasp --equery '_.padLeft($string, $length, $chars)' --replace '_.padStart({{string}}, {{length}}, {{chars}})' \
    --in-place --only-matching --recursive $DIRECTORY ||
  echo "$(tput setaf 3)Bad stuff with lodash(_.padLeft) -> lodash(_.padStart)$(tput setaf 0)"
) &&
cd $DIRECTORY > /dev/null &&
git commit -a -m 'lodash(_.padLeft) -> lodash(_.padStart)' > /dev/null &&
cd - > /dev/null

echo 'lodash(_.padRight) -> lodash(_.padEnd)'
(
  grasp --equery '_.padRight($string, $length)' --replace '_.padEnd({{string}}, {{length}})' \
    --in-place --only-matching --recursive $DIRECTORY ||
  echo "$(tput setaf 3)Bad stuff with lodash(_.padRight) -> lodash(_.padEnd)$(tput setaf 0)"
) &&
cd $DIRECTORY > /dev/null &&
git commit -a -m 'lodash(_.padRight) -> lodash(_.padEnd)' > /dev/null &&
cd - > /dev/null

echo 'lodash(_.findWhere) -> lodash(_.find)'
(
  grasp --equery '_.findWhere($collection, $source)' --replace '_.find({{collection}}, {{source}})' \
    --in-place --only-matching --recursive $DIRECTORY ||
  echo "$(tput setaf 3)Bad stuff with lodash(_.findWhere) -> lodash(_.find)$(tput setaf 0)"
) &&
cd $DIRECTORY > /dev/null &&
git commit -a -m 'lodash(_.findWhere) -> lodash(_.find)' > /dev/null &&
cd - > /dev/null

echo 'lodash(_.capitalize) -> lodash(_.upperFirst)'
(
  grasp --equery '_.capitalize($string)' --replace '_.upperFirst({{string}})' \
    --in-place --only-matching --recursive $DIRECTORY ||
  echo "$(tput setaf 3)Bad stuff with lodash(_.capitalize) -> lodash(_.upperFirst)$(tput setaf 0)"
) &&
cd $DIRECTORY > /dev/null &&
git commit -a -m 'lodash(_.capitalize) -> lodash(_.upperFirst)' > /dev/null &&
cd - > /dev/null

echo 'lodash(_.max) -> lodash(_.maxBy)'
(
  grasp --equery '_.max($object, $key)' --replace '_.maxBy({{object}}, {{key}})' \
    --in-place --only-matching --recursive $DIRECTORY ||
  echo "$(tput setaf 3)Bad stuff with lodash(_.max) -> lodash(_.maxBy)$(tput setaf 0)"
) &&
cd $DIRECTORY > /dev/null &&
git commit -a -m 'lodash(_.max) -> lodash(_.maxBy)' > /dev/null &&
cd - > /dev/null

echo 'lodash(_.min) -> lodash(_.minBy)'
(
  grasp --equery '_.min($object, $key)' --replace '_.minBy({{object}}, {{key}})' \
    --in-place --only-matching --recursive $DIRECTORY ||
  echo "$(tput setaf 3)Bad stuff with lodash(_.min) -> lodash(_.minBy)$(tput setaf 0)"
) &&
cd $DIRECTORY > /dev/null &&
git commit -a -m 'lodash(_.min) -> lodash(_.minBy)' > /dev/null &&
cd - > /dev/null

echo "$(tput setaf 1)"
echo "#                                   #"
echo "# Here are calls to handle MANUALLY #"
echo "#                                   #"
echo "$(tput setaf 0)"
grasp --only-matching --recursive --equery '_.chain(__)' $DIRECTORY
grasp --only-matching --recursive --equery '_(__)' $DIRECTORY

#
# Check if `grasp` missed some calls
#
for fn in \
  "_\.any"                                                          \
  "_\.capitalize"                                                   \
  "_\.contains"                                                     \
  "_\.each"                                                         \
  "_\.extend"                                                       \
  "_\.find"                                                         \
  "_\.findWhere"                                                    \
  "_\.first"                                                        \
  "_\.include("                                                     \
  "_\.max"         `# When last argument is a function -> _.maxBy`  \
  "_\.min"         `# When last argument is a function -> _.minBy`  \
  "_\.omit"        `# When last argument is a function -> _.omitBy` \
  "_\.padLeft"                                                      \
  "_\.pairs"                                                        \
  "_\.pluck"                                                        \
  "_\.rest"
do
  if grep --quiet --max-count=1 --recursive --exclude-dir=.git -e $fn $DIRECTORY
  then
    grep -rnH --color --exclude-dir=.git -e $fn $DIRECTORY
  fi
done
